!function(t){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=t();else if("function"==typeof define&&define.amd)define([],t);else{var n;n="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,n.pmz=t()}}(function(){return function t(n,e,r){function o(a,s){if(!e[a]){if(!n[a]){var u="function"==typeof require&&require;if(!s&&u)return u(a,!0);if(i)return i(a,!0);var f=new Error("Cannot find module '"+a+"'");throw f.code="MODULE_NOT_FOUND",f}var c=e[a]={exports:{}};n[a][0].call(c.exports,function(t){var e=n[a][1][t];return o(e?e:t)},c,c.exports,t,n,e,r)}return e[a].exports}for(var i="function"==typeof require&&require,a=0;a<r.length;a++)o(r[a]);return o}({1:[function(t,n,e){"use strict";var r=t("./model/model");e.PmzModel=r.PmzModel;var o=t("./storage/model-file");e.PmzFile=o.PmzFile},{"./model/model":5,"./storage/model-file":14}],2:[function(t,n,e){"use strict";function r(t,n){return void 0===n&&(n=10),t&&t.length?(t=t.trim(),"?"===t?null:"-1"===t?-1:parseInt(t,n)):null}function o(t){return t?t.split(",").map(function(t){return"?"===t?null:t}):[]}function i(t){return o(t).map(function(t){return t?parseInt(t):null})}function a(t){return o(t).map(function(t){return t?parseFloat(t):null})}e.asInt=r,e.asArray=o,e.asIntArray=i,e.asFloatArray=a},{}],3:[function(t,n,e){"use strict";var r=t("./base"),o=function(){function t(t){this.c=t}return t.parse=function(n){return new t(r.asInt(n,16))},t.prototype.toString=function(){return null===this.c?"":-1===this.c?"-1":this.c.toString(16).toUpperCase()},t}();e.PmzColor=o},{"./base":2}],4:[function(t,n,e){"use strict";var r=function(){function t(t,n,e,r,o,i,a){this.name=t,this.cityName=n,this.countryName=e,this.version=r,this.description=o,this.comment=i,this.delays=a}return t}();e.PmzMetadata=r},{}],5:[function(t,n,e){"use strict";var r=t("./metadata"),o=t("./transport"),i=t("./scheme"),a=function(){function t(t){this.metadata=t,this.transports=[],this.schemes=[]}return t.create=function(){var n=new t(new r.PmzMetadata("Unknown",null,null,"1.0.0",null,null,null));return n.addTransport("Metro.trp",o.PmzTransportType.Metro),n.addScheme("Metro.map"),n},t.prototype.getMetadata=function(){return this.metadata},t.prototype.getSchemes=function(){return this.schemes.map(function(t){return t.name})},t.prototype.addScheme=function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=null),this.schemes.push(new i.PmzScheme(t,t,n||{},e||[]))},t.prototype.removeScheme=function(t){this.schemes.splice(this.schemes.indexOf(this.getScheme(t)))},t.prototype.getScheme=function(t){var n=this.schemes.filter(function(n){return n.name===t});if(n)return n[0];throw new Error("Scheme "+t+" not found")},t.prototype.getTransports=function(){return this.transports.map(function(t){return t.name})},t.prototype.addTransport=function(t,n,e,r){void 0===e&&(e=null),void 0===r&&(r=null),this.transports.push(new o.PmzTransport(t,t,n,e||{},r||{}))},t.prototype.removeTransport=function(t){this.transports.splice(this.transports.indexOf(this.getTransport(t)))},t.prototype.getTransport=function(t){var n=this.transports.filter(function(n){return n.name===t});if(n)return n[0];throw new Error("Transport "+t+" not found")},t}();e.PmzModel=a},{"./metadata":4,"./scheme":9,"./transport":11}],6:[function(t,n,e){"use strict";var r=t("./base"),o=function(){function t(t,n){this.x=t,this.y=n}return t.prototype.isEmpty=function(){return 0===this.x&&0===this.y},t.parse=function(n){var e=r.asIntArray(n);return new t(e[0],e[1])},t.parseArray=function(n){for(var e=r.asIntArray(n),o=[],i=0;i<e.length-1;i+=2)o.push(new t(e[i],e[i+1]));return o},t.format=function(t){return[t.x,t.y].join(",")},t.formatArray=function(n){return n.map(t.format).join(", ")},t}();e.PmzPoint=o},{"./base":2}],7:[function(t,n,e){"use strict";var r=t("./base"),o=function(){function t(t,n,e,r){this.x=t,this.y=n,this.width=e,this.height=r}return t.prototype.isEmpty=function(){return 0===this.x&&0===this.y&&0===this.width&&0===this.height},t.parse=function(n){var e=r.asIntArray(n);return new t(e[0],e[1],e[2],e[3])},t.parseArray=function(n){for(var e=r.asIntArray(n),o=[],i=0;i<e.length-3;i+=2)o.push(new t(e[i],e[i+1],e[i+2],e[i+3]));return o},t.format=function(t){return[t.x,t.y,t.width,t.height].join(",")},t.formatArray=function(n){return n.map(t.format).join(", ")},t}();e.PmzRect=o},{"./base":2}],8:[function(t,n,e){"use strict";var r=function(){function t(t,n,e,r,o,i,a,s,u,f,c,l){this.id=t,this.name=n,this.color=e,this.labelColor=r,this.labelBackgroundColor=o,this.coords=i,this.rects=a,this.heights=s,this.rect=u,this.rects2=f,this.splines=c,this.visible=l}return t}();e.PmzSchemeLine=r},{}],9:[function(t,n,e){"use strict";var r=function(){function t(t,n,e,r){this.id=t,this.name=n,this.options=e,this.lines=r}return t.prototype.toString=function(){return"[object Scheme "+this.id+":"+this.name+"]"},t}();e.PmzScheme=r},{}],10:[function(t,n,e){"use strict";var r=t("./base"),o=t("./point"),i=function(){function t(t,n,e,r,o){return this.line=t,this.src=n,this.dst=e,this.points=r,this.isSmooth=o,this}return t.parse=function(n){for(var e=r.asArray(n),i=e[0],a=e[1],s=e[2],u=e.length%2===0,f=[],c=3;c<e.length-1;c+=2)f.push(new o.PmzPoint(parseInt(e[c]),parseInt(e[c+1])));return new t(i,a,s,f,u)},t.format=function(t){return[t.line,t.src,t.dst,o.PmzPoint.formatArray(t.points),t.isSmooth].join(",")},t}();e.PmzSpline=i},{"./base":2,"./point":6}],11:[function(t,n,e){"use strict";!function(t){t[t.Metro=0]="Metro",t[t.Bus=1]="Bus"}(e.PmzTransportType||(e.PmzTransportType={}));var r=(e.PmzTransportType,function(){function t(t,n,e,r,o){this.id=t,this.name=n,this.type=e,this.lines=r,this.transfers=o}return t}());e.PmzTransport=r},{}],12:[function(t,n,e){"use strict";function r(t){var n=[];return Object.keys(t).forEach(function(e){n.push("["+e+"]"),Object.keys(t[e]).forEach(function(r){var o=t[e][r];if(o instanceof Array)for(var i=0;i<o.length;i++)n.push(r+"="+o[i]);else n.push(r+"="+o)})}),n.reduce(function(t,n){return t+"\n"+n})}function o(t){var n={section:/^\s*\[\s*([^\]]*)\s*\]\s*$/,param:/^\s*([\w\.\-\_]+)\s*=\s*(.*?)\s*$/,comment:/^\s*;.*$/},e={},r=t.split(/\r\n|\r|\n/),o=null;return r.forEach(function(t){if(!n.comment.test(t))if(n.param.test(t)){var r=t.match(n.param);if(o){var i=e[o][r[1]];i?"string"==typeof i?e[o][r[1]]=[i,r[2]]:e[o][r[1]].push(r[2]):e[o][r[1]]=r[2]}else e[r[1]]=r[2]}else if(n.section.test(t)){var r=t.match(n.section);e[r[1]]={},o=r[1]}else 0==t.length&&o&&(o=null)}),e}e.formatIniText=r,e.parseIniText=o},{}],13:[function(t,n,e){"use strict";function r(t){var n=t.Options,e=(n.DelayNames||"").split("\n");return new i.PmzMetadata(n.Name,n.CityName,n.Country,n.NeedVersion,n.MapAuthors.reduce(function(t,n){return t+"\n"+n}),n.Comment,e)}function o(t){var n={Options:{Name:t.name,CityName:t.cityName||"Unknown",Country:t.countryName||"Unknown",NeedVersion:t.version||"1.0.0",MapAuthors:(t.description||"").split("\n")}};return t.comment&&(n.Options.Comment=t.comment),t.delays&&(n.Options.DelayNames=t.delays.reduce(function(t,n){return t+","+n})),n}var i=t("../model/metadata");e.load=r,e.save=o},{"../model/metadata":4}],14:[function(t,n,e){(function(n){"use strict";function r(t,n){return t?-1!==t.indexOf(n,t.length-n.length):!1}function o(t,n,e){for(var o in t.files){var i=t.files[o];if(r(o,n)&&e(o,i))return}}function i(t,n,e){o(t,n,function(t,n){return e(t,p.parseIniText(u.decodeWindows1251(n.asUint8Array())))})}function a(t){if(-1==["application/x-zip-compressed","application/zip"].indexOf(t.type))throw new TypeError("Invalid file type "+t.type+" for PMZ map");var n=new s(t.content);return o(n,".pmz",function(t,e){return n=new s(e.asArrayBuffer()),!0}),n}var s="undefined"!=typeof window?window.JSZip:"undefined"!=typeof n?n.JSZip:null,u=t("./utils"),f=t("./metadata-file"),c=t("./transport-file"),l=t("./scheme-file"),p=t("./ini-file"),m=t("../model/model"),d=function(){function t(){}return t.load=function(t){var n=a(t),e=null;if(i(n,".cty",function(t,n){e=new m.PmzModel(f.load(n))}),!e)throw new TypeError("Invalid file format");return i(n,".trp",function(t,n){var r=c.load(n,t,e.getMetadata());e.addTransport(r.name,r.options,r.lines,r.transfers)}),i(n,".map",function(t,n){var r=l.load(n,t,e);e.addScheme(r.name,r.options,r.lines)}),e},t.save=function(t,n){var e=a(t),r=f.save(n.metadata),o=p.formatIniText(r),i=u.encodeWindows1251(o);e.file(n.metadata.name+".cty",i),t.content=e.generate({type:"arraybuffer"})},t}();e.PmzFile=d}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../model/model":5,"./ini-file":12,"./metadata-file":13,"./scheme-file":15,"./transport-file":16,"./utils":17}],15:[function(t,n,e){"use strict";function r(t){return t?{imageFileName:t.ImageFileName,stationDiameter:t.StationDiameter,lineWidth:t.LinesWidth,upperCase:t.UpperCase,wordWrap:t.WordWrap,isVector:t.IsVector,transports:h.asArray(t.Transports),checkedTransports:h.asArray(t.CheckedTransports)}:{}}function o(t){if(!t)return{};var n={};for(var e in t){var r=t[e],o=p.PmzSpline.parse(r);n[o.line]||(n[o.line]=[]),n[o.line].push(o)}return n}function i(t,n){var e=[];for(var r in t){var o=t[r];e.push(new d.PmzSchemeLine(r,r,f.PmzColor.parse(o.Color),o.LabelsColor,o.LabelsBColor,c.PmzPoint.parseArray(o.Coordinates),l.PmzRect.parseArray(o.Rects),h.asFloatArray(o.Heights),l.PmzRect.parse(o.Rect),l.PmzRect.parseArray(o.Rects2),n[r],!0))}return e}function a(t,n){var e=[];n.getTransports().forEach(function(t){Array.prototype.push.apply(e,Object.keys(n.getTransport(t).lines))});var r={};for(var o in t)-1!==e.indexOf(o)&&(r[o]=t[o]);return r}function s(t,n,e){var s=r(t.Options),u=o(t.AdditionalNodes),f=i(a(t,e),u);return new m.PmzScheme(n,n,s,f)}function u(){throw new TypeError("Not implemented")}var f=t("../model/color"),c=t("../model/point"),l=t("../model/rect"),p=t("../model/spline"),m=t("../model/scheme"),d=t("../model/scheme-line"),h=t("./utils");e.load=s,e.save=u},{"../model/color":3,"../model/point":6,"../model/rect":7,"../model/scheme":9,"../model/scheme-line":8,"../model/spline":10,"./utils":17}],16:[function(t,n,e){"use strict";function r(t){return f.PmzTransportType.Metro}function o(t,n){var e={};for(var r in n){var o=n[r],i={};if(o.Delays)for(var a=o.Delays.split(","),s=0;s<t.length;s++)i[t[s]]=a[s];o.DelayDay&&(i.Day=o.DelayDay),o.DelayNight&&(i.Night=o.DelayNight),e[o.Name]={sectionName:r,lineMap:o.LineMap,stations:o.Stations,driving:o.Driving,delays:i}}return e}function i(t){return t}function a(t){var n={};for(var e in t)-1===["Options","Transfers","AdditionalInfo"].indexOf(e)&&(n[e]=t[e]);return n}function s(t,n,e){return new f.PmzTransport(n,n,r(t.Options||{}),o(e.delays,a(t)),i(t.Transfers||{}))}function u(){throw new TypeError("Not implemented")}var f=t("../model/transport");e.load=s,e.save=u},{"../model/transport":11}],17:[function(t,n,e){(function(n){"use strict";function r(t){var n="";return t.forEach(function(t){n+=String.fromCharCode(t)}),i.decode(n,{mode:"fatal"})}function o(t){for(var n=i.encode(t),e=new Uint8Array(n.length),r=0;r<n.length;r++)e[r]=n.charCodeAt(r);return e}var i="undefined"!=typeof window?window.windows1251:"undefined"!=typeof n?n.windows1251:null,a=t("../model/base");e.asIntArray=a.asIntArray,e.asFloatArray=a.asFloatArray,e.asArray=a.asArray;var s={DEFAULT_MAP_NAME:"Metro.map",DEFAULT_TRP_NAME:"Metro.trp",DEFAULT_LINE_COLOR:"black"};e.constants=s,e.decodeWindows1251=r,e.encodeWindows1251=o}).call(this,"undefined"!=typeof global?global:"undefined"!=typeof self?self:"undefined"!=typeof window?window:{})},{"../model/base":2}]},{},[1])(1)});
//# sourceMappingURL=data:application/json;base64,
